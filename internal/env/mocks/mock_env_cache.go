// Code generated by MockGen. DO NOT EDIT.
// Source: TaskService/internal/env (interfaces: Env)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockEnv is a mock of Env interface.
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv.
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance.
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// GetEnvString mocks base method.
func (m *MockEnv) GetEnvString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEnvString indicates an expected call of GetEnvString.
func (mr *MockEnvMockRecorder) GetEnvString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvString", reflect.TypeOf((*MockEnv)(nil).GetEnvString), arg0)
}

// GetTimeDuration mocks base method.
func (m *MockEnv) GetTimeDuration(arg0 string) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeDuration", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeDuration indicates an expected call of GetTimeDuration.
func (mr *MockEnvMockRecorder) GetTimeDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeDuration", reflect.TypeOf((*MockEnv)(nil).GetTimeDuration), arg0)
}
